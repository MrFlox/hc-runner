//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControlls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControlls"",
    ""maps"": [
        {
            ""name"": ""GamePad"",
            ""id"": ""31cf72f9-ede8-4c69-890b-f358ec5ed49f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""393f0dcf-10eb-452c-9f7f-db873b787d29"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchStart"",
                    ""type"": ""Button"",
                    ""id"": ""d879fcb9-ec20-4011-bf73-ed99ebb8203c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d041d9f4-7852-4d78-b7f2-64848525599e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""31cc4cea-4c46-4ce8-a2df-7855c3966e6e"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4dd6aa60-304c-4030-a031-1aecb720495e"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f4ca2d1-bc7e-473b-bcc9-5f151b29e064"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55ab61a6-e840-4dd3-9889-7fe4878f2f1d"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63b88ff7-fe32-419a-9d67-da74bf6a68a0"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamePad
        m_GamePad = asset.FindActionMap("GamePad", throwIfNotFound: true);
        m_GamePad_Move = m_GamePad.FindAction("Move", throwIfNotFound: true);
        m_GamePad_TouchStart = m_GamePad.FindAction("TouchStart", throwIfNotFound: true);
        m_GamePad_TouchMove = m_GamePad.FindAction("TouchMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePad
    private readonly InputActionMap m_GamePad;
    private IGamePadActions m_GamePadActionsCallbackInterface;
    private readonly InputAction m_GamePad_Move;
    private readonly InputAction m_GamePad_TouchStart;
    private readonly InputAction m_GamePad_TouchMove;
    public struct GamePadActions
    {
        private @InputControlls m_Wrapper;
        public GamePadActions(@InputControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_GamePad_Move;
        public InputAction @TouchStart => m_Wrapper.m_GamePad_TouchStart;
        public InputAction @TouchMove => m_Wrapper.m_GamePad_TouchMove;
        public InputActionMap Get() { return m_Wrapper.m_GamePad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePadActions set) { return set.Get(); }
        public void SetCallbacks(IGamePadActions instance)
        {
            if (m_Wrapper.m_GamePadActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_GamePadActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GamePadActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GamePadActionsCallbackInterface.OnMove;
                @TouchStart.started -= m_Wrapper.m_GamePadActionsCallbackInterface.OnTouchStart;
                @TouchStart.performed -= m_Wrapper.m_GamePadActionsCallbackInterface.OnTouchStart;
                @TouchStart.canceled -= m_Wrapper.m_GamePadActionsCallbackInterface.OnTouchStart;
                @TouchMove.started -= m_Wrapper.m_GamePadActionsCallbackInterface.OnTouchMove;
                @TouchMove.performed -= m_Wrapper.m_GamePadActionsCallbackInterface.OnTouchMove;
                @TouchMove.canceled -= m_Wrapper.m_GamePadActionsCallbackInterface.OnTouchMove;
            }
            m_Wrapper.m_GamePadActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @TouchStart.started += instance.OnTouchStart;
                @TouchStart.performed += instance.OnTouchStart;
                @TouchStart.canceled += instance.OnTouchStart;
                @TouchMove.started += instance.OnTouchMove;
                @TouchMove.performed += instance.OnTouchMove;
                @TouchMove.canceled += instance.OnTouchMove;
            }
        }
    }
    public GamePadActions @GamePad => new GamePadActions(this);
    public interface IGamePadActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnTouchStart(InputAction.CallbackContext context);
        void OnTouchMove(InputAction.CallbackContext context);
    }
}
